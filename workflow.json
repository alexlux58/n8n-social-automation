{
  "name": "Daily DevSecOps Content → Image → Buffer",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 9 * * *"
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Daily Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "const topics = [\n  \"CCNA fundamentals\",\n  \"Subnetting drills\",\n  \"Routing vs Switching\",\n  \"Troubleshooting playbook\",\n  \"Network security basics\",\n  \"VLANs & trunking\",\n  \"NAT vs PAT\",\n  \"OSPF vs EIGRP basics\",\n  \"Wireless basics (RSSI/SNR)\",\n  \"Packet captures 101\"\n];\nconst idx = (new Date().getDate()) % topics.length;\nreturn [{ json: { topic: topics[idx] }}];"
      },
      "id": "pick-topic",
      "name": "Pick Topic",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4o"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"You are an elite content strategist. Always return valid minified JSON (no markdown, no explanations).\"}, {\"role\": \"user\", \"content\": \"Generate one content pack around the topic: {{$json.topic}}. Return STRICT JSON with this shape: {\\\"title\\\": string, \\\"linkedin\\\": string, \\\"twitter\\\": string, \\\"reel_script\\\": string, \\\"hashtags\\\": {\\\"linkedin\\\": string[], \\\"twitter\\\": string[]}, \\\"visual_prompts\\\": string[]}. Voice: clear, educational, a bit motivational, professional but approachable. Audience: tech pros, aspiring engineers, security/DevOps learners. Constraints: Do not exceed 250 words for LinkedIn; twitter <= 280 chars. Output JSON only.\"}]"
            },
            {
              "name": "max_tokens",
              "value": "2000"
            }
          ]
        },
        "options": {}
      },
      "id": "gpt-content",
      "name": "GPT-4 (Content JSON)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "let obj;\\ntry {\\n  const response = items[0].json.choices[0].message.content;\\n  obj = JSON.parse(response);\\n} catch (e) {\\n  throw new Error('Model did not return valid JSON: ' + e.message);\\n}\\nreturn [{ json: obj }];"
      },
      "id": "parse-json",
      "name": "Parse JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "const firstVisual = (items[0].json.visual_prompts && items[0].json.visual_prompts[0]) || \\\"flat vector diagram of PC → Switch → Router → Internet, minimal tech infographic, high contrast, clean labels\\\";\\nreturn [{ json: { prompt: firstVisual } }];"
      },
      "id": "pick-visual",
      "name": "Pick Visual Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 480]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api.openai.com/v1/images/generations",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "dall-e-3"
            },
            {
              "name": "prompt",
              "value": "={{$json.prompt}}"
            },
            {
              "name": "size",
              "value": "1024x1024"
            }
          ]
        },
        "options": {}
      },
      "id": "openai-image",
      "name": "OpenAI Image (1024)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1120, 480]
    },
    {
      "parameters": {
        "jsCode": "// Merge content + image URL, enforce limits, add scheduled time\\nconst content = $items(\\\"Parse JSON\\\")[0].json;\\nconst imgNode = $items(\\\"OpenAI Image (1024)\\\")[0].json;\\nconst imageUrl = imgNode.data?.[0]?.url || imgNode.url || null;\\n\\nfunction trimTweet(s) {\\n  if (!s) return \\\"\\\";\\n  return s.length <= 280 ? s : s.slice(0, 277) + \\\"...\\\";\\n}\\n\\nconst now = new Date();\\nconst sched = new Date();\\nsched.setHours(10, 15, 0, 0);\\nif (sched < now) {\\n  sched.setDate(sched.getDate() + 1);\\n}\\n\\nreturn [{\\n  json: {\\n    title: content.title,\\n    linkedin: content.linkedin,\\n    twitter: trimTweet(content.twitter),\\n    reel_script: content.reel_script,\\n    hashtags: content.hashtags,\\n    visual_prompt: $items(\\\"Pick Visual Prompt\\\")[0].json.prompt,\\n    image_url: imageUrl,\\n    scheduled_at_iso: sched.toISOString()\\n  }\\n}];"
      },
      "id": "compose-post",
      "name": "Compose Post Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "requestMethod": "POST",
        "url": "https://api.bufferapp.com/1/updates/create.json",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\\n  \\\"profile_ids\\\": [\\\"REPLACE_WITH_BUFFER_PROFILE_ID\\\"],\\n  \\\"text\\\": $json.title + \\\"\\\\n\\\\n\\\" + $json.linkedin + \\\"\\\\n\\\\n\\\" + ($json.hashtags?.linkedin?.map(h=> (h.startsWith('#')?h:'#'+h)).join(' ') || ''),\\n  \\\"scheduled_at\\\": $json.scheduled_at_iso,\\n  \\\"media\\\": {\\n    \\\"photo\\\": $json.image_url\\n  },\\n  \\\"now\\\": false\\n}"
      },
      "id": "buffer-linkedin",
      "name": "Buffer: Schedule (LinkedIn)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "requestMethod": "POST",
        "url": "https://api.bufferapp.com/1/updates/create.json",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\\n  \\\"profile_ids\\\": [\\\"REPLACE_WITH_BUFFER_TWITTER_PROFILE_ID\\\"],\\n  \\\"text\\\": $json.twitter + \\\"\\\\n\\\\n\\\" + ($json.hashtags?.twitter?.map(h=> (h.startsWith('#')?h:'#'+h)).join(' ') || ''),\\n  \\\"scheduled_at\\\": $json.scheduled_at_iso,\\n  \\\"media\\\": {\\\"photo\\\": $json.image_url},\\n  \\\"now\\\": false\\n}"
      },
      "id": "buffer-twitter",
      "name": "Buffer: Schedule (Twitter/X)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "requestMethod": "POST",
        "url": "https://api.bufferapp.com/1/updates/create.json",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\\n  \\\"profile_ids\\\": [\\\"REPLACE_WITH_BUFFER_IG_PROFILE_ID\\\"],\\n  \\\"text\\\": $json.title + \\\" — \\\" + ($json.hashtags?.linkedin?.slice(0,8).map(h=> (h.startsWith('#')?h:'#'+h)).join(' ') || ''),\\n  \\\"scheduled_at\\\": $json.scheduled_at_iso,\\n  \\\"media\\\": {\\\"photo\\\": $json.image_url},\\n  \\\"now\\\": false\\n}"
      },
      "id": "buffer-instagram",
      "name": "Buffer: Schedule (Instagram)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "operation": "append",
        "sheetId": "REPLACE_WITH_GOOGLE_SHEET_ID",
        "range": "Archive!A:E",
        "options": {
          "valueInputMode": "RAW"
        },
        "fields": "={{[\\n  new Date().toISOString(),\\n  $json.title,\\n  $json.visual_prompt,\\n  $json.image_url,\\n  $json.scheduled_at_iso\\n]}}"
      },
      "id": "google-sheets-log",
      "name": "Google Sheets: Log",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1340, 500]
    }
  ],
  "connections": {
    "Daily Trigger": {
      "main": [
        [
          {
            "node": "Pick Topic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pick Topic": {
      "main": [
        [
          {
            "node": "GPT-4 (Content JSON)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4 (Content JSON)": {
      "main": [
        [
          {
            "node": "Parse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON": {
      "main": [
        [
          {
            "node": "Pick Visual Prompt",
            "type": "main",
            "index": 0
          },
          {
            "node": "Compose Post Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pick Visual Prompt": {
      "main": [
        [
          {
            "node": "OpenAI Image (1024)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Image (1024)": {
      "main": [
        [
          {
            "node": "Compose Post Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compose Post Payload": {
      "main": [
        [
          {
            "node": "Buffer: Schedule (LinkedIn)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Buffer: Schedule (Twitter/X)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Buffer: Schedule (Instagram)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google Sheets: Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "1"
}